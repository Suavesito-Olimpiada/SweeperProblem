let HEIGHT = document.getElementById("game-height").valueAsNumber;
let WIDTH = document.getElementById("game-width").valueAsNumber;
let FIELD = [];
let ACTIVES = [];
const VIRIDIS_DATA = [
    [0.26666666666666666, 0.00392156862745098, 0.32941176470588235],
    [0.27058823529411763, 0.0196078431372549, 0.34509803921568627],
    [0.27450980392156865, 0.03137254901960784, 0.3607843137254902],
    [0.2784313725490196, 0.047058823529411764, 0.37254901960784315],
    [0.2784313725490196, 0.06274509803921569, 0.38823529411764707],
    [0.2823529411764706, 0.0784313725490196, 0.4],
    [0.2823529411764706, 0.09019607843137255, 0.41568627450980394],
    [0.2823529411764706, 0.10588235294117647, 0.42745098039215684],
    [0.2823529411764706, 0.11764705882352941, 0.4392156862745098],
    [0.2823529411764706, 0.13333333333333333, 0.45098039215686275],
    [0.2823529411764706, 0.1450980392156863, 0.4588235294117647],
    [0.2823529411764706, 0.1568627450980392, 0.47058823529411764],
    [0.2784313725490196, 0.16862745098039217, 0.47843137254901963],
    [0.2784313725490196, 0.1843137254901961, 0.49019607843137253],
    [0.27450980392156865, 0.19607843137254902, 0.4980392156862745],
    [0.27058823529411763, 0.20784313725490197, 0.5019607843137255],
    [0.27058823529411763, 0.2196078431372549, 0.5098039215686274],
    [0.26666666666666666, 0.23137254901960785, 0.5176470588235295],
    [0.2627450980392157, 0.24313725490196078, 0.5215686274509804],
    [0.25882352941176473, 0.2549019607843137, 0.5254901960784314],
    [0.2549019607843137, 0.26666666666666666, 0.5294117647058824],
    [0.24705882352941178, 0.2784313725490196, 0.5333333333333333],
    [0.24313725490196078, 0.2901960784313726, 0.5372549019607843],
    [0.23921568627450981, 0.30196078431372547, 0.5411764705882353],
    [0.23529411764705882, 0.3137254901960784, 0.5450980392156862],
    [0.22745098039215686, 0.3254901960784314, 0.5450980392156862],
    [0.2235294117647059, 0.3333333333333333, 0.5490196078431373],
    [0.2196078431372549, 0.34509803921568627, 0.5490196078431373],
    [0.21568627450980393, 0.3568627450980392, 0.5529411764705883],
    [0.20784313725490197, 0.36470588235294116, 0.5529411764705883],
    [0.20392156862745098, 0.3764705882352941, 0.5529411764705883],
    [0.2, 0.38823529411764707, 0.5529411764705883],
    [0.19607843137254902, 0.396078431372549, 0.5568627450980392],
    [0.19215686274509805, 0.40784313725490196, 0.5568627450980392],
    [0.1843137254901961, 0.41568627450980394, 0.5568627450980392],
    [0.1803921568627451, 0.42745098039215684, 0.5568627450980392],
    [0.17647058823529413, 0.43529411764705883, 0.5568627450980392],
    [0.17254901960784313, 0.4470588235294118, 0.5568627450980392],
    [0.16862745098039217, 0.4549019607843137, 0.5568627450980392],
    [0.16470588235294117, 0.4666666666666667, 0.5568627450980392],
    [0.1607843137254902, 0.4745098039215686, 0.5568627450980392],
    [0.1568627450980392, 0.48627450980392156, 0.5568627450980392],
    [0.15294117647058825, 0.49411764705882355, 0.5568627450980392],
    [0.14901960784313725, 0.5019607843137255, 0.5568627450980392],
    [0.14901960784313725, 0.5137254901960784, 0.5568627450980392],
    [0.1450980392156863, 0.5215686274509804, 0.5568627450980392],
    [0.1411764705882353, 0.5333333333333333, 0.5568627450980392],
    [0.13725490196078433, 0.5411764705882353, 0.5529411764705883],
    [0.13333333333333333, 0.5490196078431373, 0.5529411764705883],
    [0.12941176470588237, 0.5607843137254902, 0.5529411764705883],
    [0.12549019607843137, 0.5686274509803921, 0.5490196078431373],
    [0.12549019607843137, 0.5803921568627451, 0.5490196078431373],
    [0.12156862745098039, 0.5882352941176471, 0.5450980392156862],
    [0.12156862745098039, 0.6, 0.5411764705882353],
    [0.11764705882352941, 0.6078431372549019, 0.5411764705882353],
    [0.12156862745098039, 0.615686274509804, 0.5372549019607843],
    [0.12156862745098039, 0.6274509803921569, 0.5333333333333333],
    [0.12156862745098039, 0.6352941176470588, 0.5294117647058824],
    [0.12549019607843137, 0.6470588235294118, 0.5254901960784314],
    [0.13333333333333333, 0.6549019607843137, 0.5215686274509804],
    [0.13725490196078433, 0.6627450980392157, 0.5137254901960784],
    [0.1450980392156863, 0.6745098039215687, 0.5098039215686274],
    [0.1568627450980392, 0.6823529411764706, 0.5019607843137255],
    [0.16862745098039217, 0.6901960784313725, 0.49411764705882355],
    [0.1803921568627451, 0.7019607843137254, 0.49019607843137253],
    [0.19215686274509805, 0.7098039215686275, 0.4823529411764706],
    [0.20784313725490197, 0.7176470588235294, 0.4745098039215686],
    [0.2235294117647059, 0.7294117647058823, 0.4627450980392157],
    [0.23921568627450981, 0.7372549019607844, 0.4549019607843137],
    [0.25882352941176473, 0.7450980392156863, 0.4470588235294118],
    [0.27450980392156865, 0.7529411764705882, 0.43529411764705883],
    [0.29411764705882354, 0.7607843137254902, 0.4235294117647059],
    [0.3137254901960784, 0.7686274509803922, 0.4117647058823529],
    [0.33725490196078434, 0.7764705882352941, 0.4],
    [0.3568627450980392, 0.7843137254901961, 0.38823529411764707],
    [0.3803921568627451, 0.792156862745098, 0.3764705882352941],
    [0.4, 0.8, 0.36470588235294116],
    [0.4235294117647059, 0.807843137254902, 0.34901960784313724],
    [0.4470588235294118, 0.8117647058823529, 0.33725490196078434],
    [0.4745098039215686, 0.8196078431372549, 0.3215686274509804],
    [0.4980392156862745, 0.8274509803921568, 0.3058823529411765],
    [0.5215686274509804, 0.8313725490196079, 0.2901960784313726],
    [0.5490196078431373, 0.8392156862745098, 0.27450980392156865],
    [0.5725490196078431, 0.8431372549019608, 0.25882352941176473],
    [0.6, 0.8509803921568627, 0.23921568627450981],
    [0.6274509803921569, 0.8549019607843137, 0.2235294117647059],
    [0.6509803921568628, 0.8588235294117647, 0.20784313725490197],
    [0.6784313725490196, 0.8627450980392157, 0.18823529411764706],
    [0.7058823529411765, 0.8666666666666667, 0.17254901960784313],
    [0.7333333333333333, 0.8705882352941177, 0.15294117647058825],
    [0.7607843137254902, 0.8745098039215686, 0.13725490196078433],
    [0.788235294117647, 0.8784313725490196, 0.12156862745098039],
    [0.8156862745098039, 0.8823529411764706, 0.10980392156862745],
    [0.8392156862745098, 0.8862745098039215, 0.10196078431372549],
    [0.8666666666666667, 0.8901960784313725, 0.09411764705882353],
    [0.8941176470588236, 0.8941176470588236, 0.09411764705882353],
    [0.9176470588235294, 0.8980392156862745, 0.10196078431372549],
    [0.9450980392156862, 0.8980392156862745, 0.11372549019607843],
    [0.9686274509803922, 0.9019607843137255, 0.12549019607843137],
    [0.9921568627450981, 0.9058823529411765, 0.1450980392156863],
];

function initiateField() {
    FIELD = [];
    ACTIVES = [];
    FIELD = new Array(HEIGHT);
    for (let i = 0; i < HEIGHT; ++i) {
        FIELD[i] = new Array(WIDTH);
        for (let j = 0; j < WIDTH; ++j) {
            if (i == 0 || i == HEIGHT - 1 || j == 0 || j == WIDTH - 1) {
                FIELD[i][j] = [false, 0.0];
            } else {
                FIELD[i][j] = [true, 1.0];
                ACTIVES.push([i, j]);
            }
        }
    }
}

function rebootField() {
    for (let i = 0; i < HEIGHT; ++i) {
        for (let j = 0; j < WIDTH; ++j) {
            FIELD[i][j][1] = 0.0;
        }
    }
    for (let i = 0; i < ACTIVES.length; ++i) {
        const idx = ACTIVES[i];
        FIELD[idx[0]][idx[1]][1] = 1.0;
    }
}

function clearCells() {
    for (let i = 0; i < HEIGHT; ++i)
        for (let j = 0; j < WIDTH; ++j)
            document.getElementById(`${i},${j}`).remove();
}

function updateCell(x, y) {
    let count = 0;
    if (x != 0) ++count;
    if (x != HEIGHT - 1) ++count;
    if (y != 0) ++count;
    if (y != WIDTH - 1) ++count;
    const val = FIELD[x][y][1] / count;
    FIELD[x][y][1] = 0.0;
    if (x != 0) FIELD[x - 1][y][1] += val;
    if (x != HEIGHT - 1) FIELD[x + 1][y][1] += val;
    if (y != 0) FIELD[x][y - 1][1] += val;
    if (y != WIDTH - 1) FIELD[x][y + 1][1] += val;
}

function arraysEqual(a, b) {
    if (a === b) return true;
    if (a == null || b == null) return false;
    if (a.length !== b.length) return false;
    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) return false;
    }
    return true;
}

function onclickCell(click) {
    const idx = click.target.id.split(",").map(Number);
    if (click.ctrlKey || click.metaKey) {
        if (!FIELD[idx[0]][idx[1]][0]) {
            FIELD[idx[0]][idx[1]][0] = true;
            FIELD[idx[0]][idx[1]][1] = 1.0;
            ACTIVES.push(idx);
        }
    } else if (click.shiftKey) {
        if (FIELD[idx[0]][idx[1]][0]) {
            FIELD[idx[0]][idx[1]][0] = false;
            FIELD[idx[0]][idx[1]][1] = 0.0;
            const i = ACTIVES.findIndex((element) => {
                return element[0] == idx[0] && element[1] == idx[1];
            });
            ACTIVES.splice(i, 1);
        }
    } else {
        if (FIELD[idx[0]][idx[1]][0]) {
            updateCell(idx[0], idx[1]);
        }
    }
    drawCells(false);
}

function randomCells(i, elem) {
    if (i == 0) {
        elem.textContent = "TerminÃ³";
        drawCells(true);
        setTimeout(() => (elem.textContent = "Aleatorio"), 1500);
        return;
    }
    elem.textContent = `Espera: ${i}`;
    const idx = (Math.random() * ACTIVES.length) | 0;
    const x = ACTIVES[idx][0];
    const y = ACTIVES[idx][1];
    updateCell(x, y);
    setTimeout(() => {
        drawCells();
        randomCells(i - 1, elem);
    }, (1000 / (i + 2)) | 0);
}

function initiateCells() {
    const field = document.getElementById("field");
    for (let i = 0; i < HEIGHT; ++i) {
        for (let j = 0; j < WIDTH; ++j) {
            const cell = document.createElement("div");
            cell.className = "c";
            cell.textContent = FIELD[i][j][1];
            cell.addEventListener("click", onclickCell);
            cell.id = `${i},${j}`;
            field.appendChild(cell);
        }
    }
    field.style.height = `${60 * HEIGHT}px`;
    field.style.width = `${60 * WIDTH}px`;
    // Insert style for class .c into css rules
    const style = document.createElement("style");
    document.head.appendChild(style);
    style.sheet.insertRule(
        `.c {
			width: 40px;
			height: 40px;
			line-height: 40px;
		}`
    );
}

function viridis(c) {
    const idx = c * 99.0;
    if (idx > 99) {
        const rgb = VIRIDIS_DATA[99];
        return [
            Math.floor(rgb[0] * 255),
            Math.floor(rgb[1] * 255),
            Math.floor(rgb[2] * 255),
        ];
    }
    if (idx < 0) {
        const rgb = VIRIDIS_DATA[0];
        return [
            Math.floor(rgb[0] * 255),
            Math.floor(rgb[1] * 255),
            Math.floor(rgb[2] * 255),
        ];
    }
    const rgb1 = VIRIDIS_DATA[Math.floor(idx)];
    const rgb2 = VIRIDIS_DATA[Math.floor(idx)];
    const p = idx - Math.floor(idx);
    const r = (rgb1[0] - rgb2[0]) * p + rgb1[0];
    const g = (rgb1[1] - rgb2[1]) * p + rgb1[1];
    const b = (rgb1[2] - rgb2[2]) * p + rgb1[2];
    return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
}

function format(f) {
    if (f < 1e-4) return 0;
    const str = String(f);
    const idx = str.indexOf(".");
    return str.slice(0, idx + 5);
}

function drawCells(normalized = false) {
    let max = 0.0;
    if (normalized) {
        max = 1.0;
        for (let i = 0; i < HEIGHT; ++i) {
            for (let j = 0; j < WIDTH; ++j) {
                if (max < FIELD[i][j][1]) {
                    max = FIELD[i][j][1];
                }
            }
        }
    }
    for (let i = 0; i < HEIGHT; ++i) {
        for (let j = 0; j < WIDTH; ++j) {
            const id = `${i},${j}`;
            const cell = document.getElementById(id);
            cell.textContent = format(FIELD[i][j][1]);
            const rgb = normalized
                ? viridis(FIELD[i][j][1] / max)
                : viridis(FIELD[i][j][1]);
            const rgbl = viridis(1.0 - FIELD[i][j][1]);
            const alpha = FIELD[i][j][0] ? 0.9 : 0.5;
            cell.style.background = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, ${alpha})`;
            if (Math.abs(1.0 - (2 * FIELD[i][j][1]) / max) < 0.2)
                cell.style.color = `rgb(230, 230, 0)`;
            else cell.style.color = `rgb(${rgbl[0]}, ${rgbl[1]}, ${rgbl[2]})`;
        }
    }
}

// trigger on change
function resizeField() {
    clearCells();
    HEIGHT = document.getElementById("game-height").valueAsNumber;
    WIDTH = document.getElementById("game-width").valueAsNumber;
    initiateField();
    initiateCells();
    drawCells();
}

function init() {
    initiateField();
    initiateCells();
    drawCells();
    const height = document.getElementById("game-height");
    height.addEventListener("click", resizeField);
    const width = document.getElementById("game-width");
    width.addEventListener("click", resizeField);
    const reset = document.getElementById("reset");
    reset.addEventListener("click", () => {
        initiateField();
        drawCells();
    });
    const reboot = document.getElementById("reboot");
    reboot.addEventListener("click", () => {
        rebootField();
        drawCells();
    });
    const random = document.getElementById("random");
    random.addEventListener("click", () =>
        randomCells(20 * ACTIVES.length, random)
    );
}

init();
